// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ATSContext))]
    [Migration("20200721214929_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("Core.Entities.Admin.CVSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnquiryForwardedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceivedFromAssociateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceivedFromCandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryForwardedId");

                    b.HasIndex("ReceivedFromAssociateId");

                    b.HasIndex("ReceivedFromCandidateId");

                    b.HasIndex("SourceId");

                    b.ToTable("CVSource");
                });

            modelBuilder.Entity("Core.Entities.Admin.ContractReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CommerciallyFeasible")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DocumentationWillBeAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeeFromClient")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeeFromClientCurrency")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HistoricalStatusAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogisticallyFeasible")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ReviewedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SalaryOfferedFeasible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceChargesInINR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TechnicallyFeasible")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VisaAvailable")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryItemId")
                        .IsUnique();

                    b.ToTable("ContractReviewItems");
                });

            modelBuilder.Entity("Core.Entities.Admin.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("CustomerOfficialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntroducedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("Phone1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core.Entities.Admin.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressType")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("PIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Valid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Core.Entities.Admin.CustomerOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("Core.Entities.Admin.EnquiryForwarded", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Addressee")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerOfficialId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForwardedByMode")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ForwardedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SentReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerOfficialId");

                    b.HasIndex("EnquiryItemId");

                    b.ToTable("EnquiryForwards");
                });

            modelBuilder.Entity("Core.Entities.Admin.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateEmailMessage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QntyConcluded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("RemindOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToDoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("TransDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionDetail")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("ToDoId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Core.Entities.Admin.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedToId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnquiryItemId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("TaskDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Administrative");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TaskType");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.Enquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("EnquiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnquiryNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnquiryRef")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnquiryStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HRExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LogisticsExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReadyToReview")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ReviewedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountExecutiveId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HRExecutiveId");

                    b.HasIndex("LogisticsExecutiveId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.EnquiryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssessingHRMId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssessingSupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CVSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ECNR")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpDesiredInYrsMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpDesiredInYrsMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HRExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Housing")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobDescAttachment")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobDescId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobDescId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescInBrief")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemunerationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RemunerationId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalaryRangeMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalaryRangeMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Transport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVSourceId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnquiryId");

                    b.HasIndex("JobDescId1");

                    b.HasIndex("RemunerationId1");

                    b.ToTable("EnquiryItems");
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.JobDesc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceDesiredMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceDesiredMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobProfileDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobProfileUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualificationDesired")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.Remuneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FoodAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Housing")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HousingAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveAvailableAfterHowmanyMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveEntitlementPerYear")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OtherAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("TEXT")
                        .HasMaxLength(3);

                    b.Property<int>("SalaryMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalaryMin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SalaryNegotiable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Transport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TransportAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryItemId")
                        .IsUnique();

                    b.ToTable("Remunerations");
                });

            modelBuilder.Entity("Core.Entities.HR.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("AssessedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryNameAndRef")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerNameAndCity")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnquiryItemId");

                    b.HasIndex("EnquiryItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Core.Entities.HR.AssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Assessed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainSubject")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PointsAllotted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionNo", "AssessmentId")
                        .IsUnique();

                    b.ToTable("AssessmentItem");
                });

            modelBuilder.Entity("Core.Entities.HR.AssessmentQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainSubject")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(150);

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryItemId");

                    b.ToTable("AssessmentQs");
                });

            modelBuilder.Entity("Core.Entities.HR.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Core.Entities.HR.CVEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVReferredId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("HRExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HRMReviewResult")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HRManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HRSupReviewResult")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HRSupervisorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ReviewedByHRM")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReviewedByHRMOn")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ReviewedByHRSup")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ReviewedByHRSupOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SubmittedByHRExecOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EnquiryItemId");

                    b.ToTable("CVEvaluations");
                });

            modelBuilder.Entity("Core.Entities.HR.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplicationDated")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CandidateStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastStatusUpdatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastStatusUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("PPNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNo")
                        .IsUnique();

                    b.HasIndex("LastStatusUpdatedById");

                    b.HasIndex("PPNo")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Core.Entities.HR.EnquiryItemAssessmentQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DomainSubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DomainSubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DomainSubId");

                    b.ToTable("EnquiryItemAssessmentQs");
                });

            modelBuilder.Entity("Core.Entities.HR.HRSkillClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IndustryTypeId");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("HRSkillClaims");
                });

            modelBuilder.Entity("Core.Entities.HR.JobCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnquiryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JobCardDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OkToConsider")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OkToForwardCVToClient")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PPInPossession")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PPIsValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RemunerationAcceptable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ServiceChargesAcceptable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SuspiciousCandidate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WillingToEmigrate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WillingToTravelWithinTwoWeeksOfSelection")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("JobCards");
                });

            modelBuilder.Entity("Core.Entities.Masters.AssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DomainSubId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStandardQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentParameter");

                    b.HasIndex("DomainSubId", "SrNo")
                        .IsUnique();

                    b.ToTable("AssessmentQsBank");
                });

            modelBuilder.Entity("Core.Entities.Masters.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(75);

                    b.Property<int>("SkillLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("IndustryTypeId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("Name", "SkillLevelId", "IndustryTypeId")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.Entities.Masters.DomainSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DomainSubName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DomainSubName")
                        .IsUnique();

                    b.ToTable("DomainSubs");
                });

            modelBuilder.Entity("Core.Entities.Masters.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DOJ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInEmployment")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastDateOfEmployment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Entities.Masters.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Core.Entities.Masters.IndustryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IndustryTypes");
                });

            modelBuilder.Entity("Core.Entities.Masters.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.Masters.SkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SkillLevels");
                });

            modelBuilder.Entity("Core.Entities.Masters.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceGroupId", "Name")
                        .IsUnique();

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Core.Entities.Masters.SourceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SourceGroups");
                });

            modelBuilder.Entity("Core.Entities.Processing.Processing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextProcessingId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProcessingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId");

                    b.ToTable("Processings");
                });

            modelBuilder.Entity("Core.Entities.Admin.CVSource", b =>
                {
                    b.HasOne("Core.Entities.Admin.EnquiryForwarded", null)
                        .WithMany("CVSources")
                        .HasForeignKey("EnquiryForwardedId");

                    b.HasOne("Core.Entities.Admin.Customer", "ReceivedFromAssociate")
                        .WithMany()
                        .HasForeignKey("ReceivedFromAssociateId");

                    b.HasOne("Core.Entities.HR.Candidate", "ReceivedFromCandidate")
                        .WithMany()
                        .HasForeignKey("ReceivedFromCandidateId");

                    b.HasOne("Core.Entities.Masters.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Core.Entities.Admin.CustomerAddress", b =>
                {
                    b.HasOne("Core.Entities.Admin.Customer", null)
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Admin.CustomerOfficial", b =>
                {
                    b.HasOne("Core.Entities.Admin.Customer", null)
                        .WithMany("CustomerOfficials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Admin.EnquiryForwarded", b =>
                {
                    b.HasOne("Core.Entities.Admin.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Admin.TaskItem", b =>
                {
                    b.HasOne("Core.Entities.Admin.ToDo", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Admin.ToDo", b =>
                {
                    b.HasOne("Core.Entities.Masters.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Masters.Employee", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.Enquiry", b =>
                {
                    b.HasOne("Core.Entities.Admin.CustomerOfficial", "AccountExecutive")
                        .WithMany()
                        .HasForeignKey("AccountExecutiveId");

                    b.HasOne("Core.Entities.Admin.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Admin.CustomerOfficial", "HRExecutive")
                        .WithMany()
                        .HasForeignKey("HRExecutiveId");

                    b.HasOne("Core.Entities.Admin.CustomerOfficial", "LogisticsExecutive")
                        .WithMany()
                        .HasForeignKey("LogisticsExecutiveId");

                    b.HasOne("Core.Entities.Masters.Employee", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("Core.Entities.Masters.Employee", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById");

                    b.OwnsOne("Core.Entities.EnquiryAggregate.SiteAddress", "ShipToAddress", b1 =>
                        {
                            b1.Property<int>("EnquiryId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("LastName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("TEXT");

                            b1.HasKey("EnquiryId");

                            b1.ToTable("Enquiries");

                            b1.WithOwner()
                                .HasForeignKey("EnquiryId");
                        });
                });

            modelBuilder.Entity("Core.Entities.EnquiryAggregate.EnquiryItem", b =>
                {
                    b.HasOne("Core.Entities.Admin.CVSource", null)
                        .WithMany("EnquiryItems")
                        .HasForeignKey("CVSourceId");

                    b.HasOne("Core.Entities.HR.Candidate", null)
                        .WithMany("ReferredToEnquiryItems")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnquiryAggregate.Enquiry", null)
                        .WithMany("EnquiryItems")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnquiryAggregate.JobDesc", "JobDesc")
                        .WithMany()
                        .HasForeignKey("JobDescId1");

                    b.HasOne("Core.Entities.EnquiryAggregate.Remuneration", "Remuneration")
                        .WithMany()
                        .HasForeignKey("RemunerationId1");

                    b.OwnsOne("Core.Entities.EnquiryAggregate.CategoryItemOrdered", "ItemOrdered", b1 =>
                        {
                            b1.Property<int>("EnquiryItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CategoryItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("CategoryName")
                                .HasColumnType("TEXT");

                            b1.HasKey("EnquiryItemId");

                            b1.ToTable("EnquiryItems");

                            b1.WithOwner()
                                .HasForeignKey("EnquiryItemId");
                        });
                });

            modelBuilder.Entity("Core.Entities.HR.Assessment", b =>
                {
                    b.HasOne("Core.Entities.HR.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnquiryAggregate.EnquiryItem", "Enquiryitem")
                        .WithMany()
                        .HasForeignKey("EnquiryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HR.AssessmentItem", b =>
                {
                    b.HasOne("Core.Entities.HR.Assessment", null)
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HR.AssessmentQ", b =>
                {
                    b.HasOne("Core.Entities.EnquiryAggregate.EnquiryItem", "EnquiryItem")
                        .WithMany()
                        .HasForeignKey("EnquiryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HR.Attachment", b =>
                {
                    b.HasOne("Core.Entities.HR.Candidate", null)
                        .WithMany("Attachments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HR.CVEvaluation", b =>
                {
                    b.HasOne("Core.Entities.HR.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnquiryAggregate.EnquiryItem", "EnquiryItem")
                        .WithMany()
                        .HasForeignKey("EnquiryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HR.Candidate", b =>
                {
                    b.HasOne("Core.Entities.Masters.Employee", "LastStatusUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastStatusUpdatedById");

                    b.OwnsOne("Core.Entities.HR.CandidateAddress", "CandidateAddress", b1 =>
                        {
                            b1.Property<int>("CandidateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Address1")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address2")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AddressType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PIN")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("Valid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CandidateId");

                            b1.ToTable("Candidates");

                            b1.WithOwner()
                                .HasForeignKey("CandidateId");
                        });
                });

            modelBuilder.Entity("Core.Entities.HR.EnquiryItemAssessmentQ", b =>
                {
                    b.HasOne("Core.Entities.Masters.DomainSub", "DomainSub")
                        .WithMany()
                        .HasForeignKey("DomainSubId");
                });

            modelBuilder.Entity("Core.Entities.HR.HRSkillClaim", b =>
                {
                    b.HasOne("Core.Entities.Masters.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Masters.IndustryType", "IndustryType")
                        .WithMany()
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Masters.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Masters.AssessmentQBank", b =>
                {
                    b.HasOne("Core.Entities.Masters.DomainSub", "DomainSubj")
                        .WithMany()
                        .HasForeignKey("DomainSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Masters.Category", b =>
                {
                    b.HasOne("Core.Entities.HR.Candidate", null)
                        .WithMany("CandidateCategories")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Masters.IndustryType", "IndustryType")
                        .WithMany()
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Masters.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Masters.Employee", b =>
                {
                    b.OwnsOne("Core.Entities.HR.Person", "Person", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AadharNo")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("DOB")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Gender")
                                .HasColumnType("TEXT");

                            b1.Property<string>("KnownAs")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PPNo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SecondName")
                                .HasColumnType("TEXT");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Core.Entities.Masters.EmployeeAddress", "EmployeeAddress", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Address1")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address2")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AddressType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PIN")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("Valid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });
                });

            modelBuilder.Entity("Core.Entities.Masters.Grade", b =>
                {
                    b.HasOne("Core.Entities.Admin.Customer", null)
                        .WithOne("Grade")
                        .HasForeignKey("Core.Entities.Masters.Grade", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Masters.IndustryType", b =>
                {
                    b.HasOne("Core.Entities.Admin.Customer", null)
                        .WithMany("IndustryTypes")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Core.Entities.Masters.Role", b =>
                {
                    b.HasOne("Core.Entities.Masters.Employee", null)
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
